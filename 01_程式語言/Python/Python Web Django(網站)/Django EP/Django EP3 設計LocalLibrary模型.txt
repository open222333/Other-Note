------------------概覽------------------
Django Web 應用程序通過被稱為模型的 Python 對象，訪問和管理數據。模型定義儲存數據的結構，包括欄位類型、以及可能還有最大大小，默認值，選擇列表選項，幫助文檔，表單的標籤文本等。模型的定義與底層數據庫無關 — 你可以選擇其中一個，作為項目設置的一部分。一旦你選擇了要使用的數據庫，你就不需要直接與之交談 — 只需編寫模型結構和其他代碼，Django 可以處理與數據庫通信的所有繁瑣工作。
------------------指令------------------
再次執行資料庫遷移(database migrations)
模型都建立好，必須再次執行資料庫migrations指令來將這些修改內容更新到資料庫中。

python3 manage.py makemigrations # 建立一個檔案紀錄你更新了哪些東西
python3 manage.py migrate # 根據makemigrations建立的檔案去更新資料庫
------------------詳解------------------
設計模型時，為每個“物件”分別設置模型（相關信息分組）是有意義的。在這種情況下，明顯的物件是書籍，書本實例和作者。
位置： (/locallibrary/catalog/models.py)

一個名為MyModelName的「典型」模型範例碼：
class MyModelName(models.Model):
    """A typical class defining a model, derived from the Model class."""

    # Fields 字段 模型可以有任意數量的字段、任何類型的字段 — 每個字段都表示我們要存放在我們的一個資料庫中的一欄數據(a column of data)。每筆資料庫記錄（列 row）將由每個字段值之一組成。
    my_field_name = models.CharField(max_length=20, help_text='Enter field documentation')
    ...

    # Metadata 元數據最有用的功能之一是控制在查詢模型類型時返回之記錄的默認排序。
    # 使用減號（-）前綴字段名稱以反轉排序順序。
    class Meta:
        ordering = ['-my_field_name']

    # Methods 一個模型也可以有方法。最起碼，在每個模型中，你應該定義標準的Python 類方法__str__() ，來為每個物件返回一個人類可讀的字符串。此字符用於表示管理站點的各個記錄（以及你需要引用模型實例的任何其他位置）。通常這將返回模型中的標題或名稱字段。

    def get_absolute_url(self):
         """Returns the url to access a particular instance of MyModelName."""
         return reverse('model-detail-view', args=[str(self.id)])

    def __str__(self):
        """String for representing the MyModelName object (in Admin site etc.)."""
        return self.field_name
        

------------------------------
創建和修改記錄
要創建一個記錄，你可以定義一個模型實例，然後呼叫 save()。  
# Create a new record using the model's constructor.
record = MyModelName(my_field_name="Instance #1")

# Save the object into the database.
record.save()

# Access model field values using Python attributes.
print(record.id) #should return 1 for the first record.
print(record.my_field_name) # should print 'Instance #1'

# Change record by modifying the fields, then calling save().
record.my_field_name = "New Instance Name"
record.save()

取得一個模型的所有紀錄
all_books = Book.objects.all()

Django的 filter() 方法讓我們可以透過符合特定文字或數值的字段篩選回傳的QuerySet。例如篩選書名裡有 "wild" 的書並且計算總數，如下面所示。

wild_books = Book.objects.filter(title__contains='wild')
number_wild_books = Book.objects.filter(title__contains='wild').count()
比對方式：
https://docs.djangoproject.com/en/2.0/ref/models/querysets/#field-lookups
------------------------------------------------------------------------------------
常用字段參數
當聲明很多／大多數不同的字段類型時，可以使用以下常用參數：

help_text :提供HTML表單文本標籤(eg i在管理站點中),如上所述。
verbose_name :字段標籤中的可讀性名稱，如果沒有被指定，Django將從字段名稱推斷默認的詳細名稱。
default :該字段的默認值。這可以是值或可呼叫物件(callable object)，在這種情況下，每次創建新紀錄時都將呼叫該物件。
null：如為 True，即允許 Django 於資料庫該欄位寫入 NULL（但欄位型態如為 CharField 則會寫入空字串）。預設值是 False。
blank :如果True，表單中的字段被允許為空白。默認是False，這意味著Django的表單驗證將強制你輸入一個值。這通常搭配 NULL=True 使用，因為如果要允許空值，你還希望數據庫能夠適當地表示它們。
choices :這是給此字段的一組選項。如果提供這一項，預設對應的表單部件是「該組選項的列表」，而不是原先的標准文本字段。
primary_key :如果是True，將當前字段設置為模型的主鍵（主鍵是被指定用來唯一辨識所有不同表記錄的特殊數據庫欄位(column)）。如果沒有指定字段作為主鍵，則Django將自動為此添加一個字段。
------------------------------------------------------------------------------------
常用字段類型
以下列表描述了一些更常用的字段類型。

CharField 是用來定義短到中等長度的字段字符串。你必須指定max_length要存儲的數據。
TextField 用於大型任意長度的字符串。你可以max_length為該字段指定一個字段，但僅當該字段以表單顯示時才會使用（不會在數據庫級別強制執行）。
IntegerField 是一個用於存儲整數（整數）值的字段，用於在表單中驗證輸入的值為整數。
DateField 和DateTimeField 用於存儲／表示日期和日期／時間信息（分別是Python.datetime.date 和 datetime.datetime 對象）。這些字段可以另外表明（互斥）參數 auto_now=Ture （在每次保存模型時將該字段設置為當前日期），auto_now_add（僅設置模型首次創建時的日期）和 default（設置默認日期，可以被用戶覆蓋）。
EmailField 用於存儲和驗證電子郵件地址。
FileField 和ImageField 分別用於上傳文件和圖像（ImageField 只需添加上傳的文件是圖像的附加驗證）。這些參數用於定義上傳文件的存儲方式和位置。
AutoField 是一種 IntegerField 自動遞增的特殊類型。如果你沒有明確指定一個主鍵，則此類型的主鍵將自動添加到模型中。
ForeignKey 用於指定與另一個數據庫模型的一對多關係（例如，汽車有一個製造商，但製造商可以製作許多汽車）。關係的“一”側是包含密鑰的模型。
ManyToManyField 用於指定多對多關係。