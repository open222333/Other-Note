https://github.com/mdn/django-locallibrary-tutorial  # 源代碼
------------------概覽------------------
網址 -> urls.py -> views.py -> models.py
Model : 定義一些資料庫的東西 ( ORM )，這層通常是直接和資料有關。
Template : 使用者基本上就是看到這層，也就是最後所呈現的 Template ( html )。
View : 可以將這層看做是中間層，它主要負責 Model 和 Template 之間的業務邏輯。
------------------指令------------------
運行以下命令，來定義資料庫中這些模型的表（確認你位於包含 manage.py 的目錄中):
python3 manage.py makemigrations
python3 manage.py migrate

python3 manage.py runserver # 運行開發網頁服務器

django-admin.py startproject <project_name>	建立 Django 專案
python manage.py -h <command_name>	查看 Django commands 的使用方法
python manage.py runserver	啟動開發伺服器
python manage.py startapp <app_name>	新增 Django app
------------------詳解------------------

django-admin startproject [dirname] # 創建新項目
django-admin工具會創建如下所示的文件夾結構

[dirname]/
    manage.py
    locallibrary/
        __init__.py
        settings.py
        urls.py
        wsgi.py
        
__init__.py 是一個空文件，指示 Python 將此目錄視為 Python 套件。
settings.py  包含所有的網站設置。這是可以註冊所有創建的應用的地方，也是靜態文件，數據庫配置的地方，等等。
urls.py定義了網站url到view的映射。雖然這裡可以包含所有的url，但是更常見的做法是把應用相關的url包含在相關應用中，你可以在接下來的教程裡看到。
wsgi.py  幫助Django應用和網絡服務器間的通訊。你可以把這個當作模板。

創建 catalog 應用
python3 manage.py startapp catalog
windows平台下應該改為： py -3 manage.py startapp catalog

註冊catalog應用
位置：(locallibrary/locallibrary/settings.py)
打開項目設置文件，找到INSTALLED_APPS 列表裡的定義。如下所示，在列表的最後添加新的一行。

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'catalog.apps.CatalogConfig', 
]


配置資料庫
現在可以為項目配置資料庫了——為了避免性能上的差異，最好在生產和開發中使用同一種資料庫。你可以在資料庫  裡找到不同的設置方法(Django文檔)。 

在這個項目裡，我們使用SQLite。因為在展示用的數據庫中，我們不會有很多並發存取的行為。同時，也因為SQLite不需要額外的配置工作。你可以在settings.py裡看到這個數據庫怎樣配置的。（更多信息如下所示）

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


改變時區 —改為和標準tz時區數據表  裡的字符串相同就可以了（數據表裡的TZ列有你想要的時區）。
標準tz時區數據表 https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TIME_ZONE = 'Europe/London'

有兩個設置你現在不會用到，不過你應該留意：

SECRET_KEY. 這個密匙值，是Django網站安全策略的一部分。如果在開發環境中，沒有保護好這個密匙，把代碼投入生產環境時，最好用不同的密匙代替。（可能從環境變量或文件中讀取）。
DEBUG. 這個會在debug日誌裡輸出錯誤信息，而不是輸入H​​TTP的返回碼。在生產環境中，它應設置為false，因為輸出的錯誤信息，會幫助想要攻擊網站的人。


鏈接URL映射器
位置：(locallibrary/locallibrary/urls.py)
在項目文件夾裡，創建網站時同時生成了URL映射器（urls.py）。儘管你可以用它來管理所有的URL映射，但是更常用的做法是把URL映射留到它們相關的應用中。

打開locallibrary/locallibrary/urls.py  注意指導文字解釋了一些使用URL映射器的方法。
from django.contrib import admin
from django.urls import path
from django.views.generic import RedirectView
from django.urls import include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('catalog/', include('catalog.urls')),
    path('', RedirectView.as_view(url='/catalog/', permanent=True)),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


在catalog文件夾中，創建一個名為urls.py的文件，並添加以下文本，以定義（空）導入的urlpatterns。這是我們在構建應用程序時，添加模式的地方。

from django.urls import path
from . import views


urlpatterns = [

]

測試網站框架

運行資料庫遷移
Django使用對象關係映射器（ORM），將Django代碼中的模型定義，映射到底層資料庫使用的數據結構。當我們更改模型定義時，Django會跟踪更改，並創建資料庫遷移腳本(位於 /locallibrary/catalog/migrations/ )，來自動遷移資料庫中的底層數據結構。

當我們創建網站時，Django會自動添加一些模型，供網站的管理部分使用（稍後我們會解釋）。運行以下命令，來定義資料庫中這些模型的表（確認你位於包含 manage.py 的目錄中):

python3 manage.py makemigrations
python3 manage.py migrate
重要: 每次模型改變，都需要運行以上命令，來影響需要存放的數據結構（包括添加和刪除整個模型和單個字段）。

運行網站
python3 manage.py runserver 運行開發網頁服務器http://127.0.0.1:8000/catalog/。（同樣的要在manage.py的目錄